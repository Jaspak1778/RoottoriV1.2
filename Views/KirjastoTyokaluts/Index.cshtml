@model IEnumerable<RoottoriV1._2.Models.KirjastoTyokalut>

@{
    ViewBag.Title = "Index";
}

@using (Html.BeginForm("Index", "KirjastoTyokaluts", FormMethod.Get))
{
    <h3>Tyokalut</h3>
    <div class="input-group" style="margin-left:600px">

        <p class="px-1">@Html.Label("Etsi termillä: ")</p>
        <p class="px-1">@Html.TextBox("searchString1", ViewBag.currentFilter1 as string, new { @class = "form-control" })</p>
        <p class="px-1"><input class="btn btn-primary btm-sm" type="submit" value="Etsi" class="form-control" /></p>
    </div>
}


<table class="table">
    <thead>
        <tr>
            <th>TyokaluKategoriaID</th>
            <th>TyokaluNro</th>
            <th>TyokalunNimi</th>
            <th>Pituus</th>
            <th>Halkaisija</th>
            <th>Pala</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TyokaluKategoriaID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TyokaluNro)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TyokalunNimi)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Pituus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Halkaisija)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Pala)
                </td>

                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.TyokaluID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.TyokaluID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.TyokaluID })
                </td>
            </tr>
        }
    </tbody>
</table>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;
        const comparer = (idx, asc) => (a, b) => ((v1, v2) =>
            v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));
        document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
            const table = th.closest('table');
            const tbody = table.querySelector('tbody');
            Array.from(tbody.querySelectorAll('tr'))
                .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
                .forEach(tr => tbody.appendChild(tr));
        })));
    </script>
}